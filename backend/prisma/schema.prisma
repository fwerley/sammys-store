// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id           String   @id @default(uuid())
  name         String   @unique
  slug         String   @unique
  image        String
  brand        String
  category     String
  description  String
  price        Float
  countInStock Int      @map("count_in_stock")
  rating       Float
  numReviews   Int      @map("num_reviews")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  OrderItem OrderItem[]

  @@map("products")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  document  String?
  mobile    String?
  isAdmin   Boolean  @default(false) @map("is_admin")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  Order           Order[]
  ShippingAddress ShippingAddress[]

  @@map("users")
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @map("product_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  @@map("order_items")
}

model ShippingAddress {
  id              String   @id @default(uuid())
  fullName        String   @map("full_name")
  address         String
  neighborhood    String?
  number          String
  city            String
  postalCode      String   @map("postal_code")
  federativeUnity String
  createdAt       DateTime @default(now()) @map(name: "created_at")
  updatedAt       DateTime @updatedAt @map(name: "updated_at")

  order  Order?
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("shipping_address")
}

model Transaction {
  id                String    @id @default(uuid())
  code              String    @unique
  status            Status    @default(STARTED)
  paidAt            DateTime?
  installments      Int
  processorResponse String?
  order             Order     @relation(fields: [orderId], references: [id])
  orderId           String    @unique
  transactionId     String?   @unique

  @@map("transaction")
}

model PriceOrder {
  id            String @id @default(uuid())
  itemsPrice    Float  @map("items_price")
  shippingPrice Float  @map("shipping_price")
  taxPrice      Float  @map("tax_price")
  totalPrice    Float  @map("total_price")

  createdAt DateTime @default(now()) @map(name: "created_at") @db.Date
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  Order Order?

  @@map("price_order")
}

model Order {
  id String @id @default(uuid())

  orderItems      OrderItem[]
  shippingAddress ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  paymentMethod   PaymentType     @default(BILLET)
  orderPrice      PriceOrder      @relation(fields: [priceOrderId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
  isPaid          Boolean         @default(false) @map("is_paid")
  isDelivered     Boolean         @default(false) @map("is_delivered")
  deliveredAt     DateTime?       @map("delivered_at")
  createdAt       DateTime        @default(now()) @map(name: "created_at")
  updatedAt       DateTime        @updatedAt @map(name: "updated_at")
  transaction     Transaction?

  shippingAddressId String @unique
  priceOrderId      String @unique
  userId            String

  @@map("orders")
}

enum Status {
  STARTED
  PROCESSING
  PENDING
  APPROVED
  REFUSED
  REFUNDED
  CHARGBACK
  ERROR
}

enum PaymentType {
  BILLET
  CREDIT_CARD
}
