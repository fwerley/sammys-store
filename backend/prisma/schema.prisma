generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ReviewProduct {
  id        String   @id @default(uuid())
  name      String
  comment   String
  rating    Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Product   Product  @relation(fields: [productId], references: [id])
  productId String

  @@map("review_product")
}

model Product {
  id           String          @id @default(uuid())
  name         String          @unique
  slug         String          @unique
  image        String
  images       String[]
  brand        String
  category     String
  description  String
  price        Float
  reviews      ReviewProduct[]
  rating       Float
  seller       Seller          @relation(fields: [sellerId], references: [id])
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  countInStock Int             @map("count_in_stock")
  numReviews   Int             @map("num_reviews")
  OrderItem    OrderItem[]
  sellerId     String

  @@map("products")
}

model Seller {
  id          String    @id @default(uuid())
  name        String
  logo        String
  description String
  user        User      @relation(fields: [userId], references: [id])
  rating      Float     @default(0)
  numReviews  Int       @default(0)
  userId      String    @unique
  Order       Order[]
  Product     Product[]

  @@map("seller")
}

model User {
  name            String
  email           String            @unique
  password        String
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  isAdmin         Boolean           @default(false) @map("is_admin")
  isSeller        Boolean           @default(false)
  seller          Seller?
  document        String?
  mobile          String?
  Order           Order[]
  ShippingAddress ShippingAddress[]

  @@map("users")
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  productId String   @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  orderId   String
  Order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model ShippingAddress {
  id              String   @id @default(uuid())
  fullName        String   @map("full_name")
  address         String
  city            String
  postalCode      String   @map("postal_code")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  federativeUnity String
  neighborhood    String?
  number          String
  userId          String?
  order           Order?
  user            User?    @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@map("shipping_address")
}

model Transaction {
  id                String    @id @default(uuid())
  code              String    @unique
  status            Status    @default(STARTED)
  installments      Int
  processorResponse String?
  orderId           String    @unique
  paidAt            DateTime?
  transactionId     String?   @unique
  order             Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("transaction")
}

model PriceOrder {
  id            String   @id @default(uuid())
  itemsPrice    Float    @map("items_price")
  shippingPrice Float    @map("shipping_price")
  taxPrice      Float    @map("tax_price")
  totalPrice    Float    @map("total_price")
  createdAt     DateTime @default(now()) @map("created_at") @db.Date
  updatedAt     DateTime @updatedAt @map("updated_at")
  Order         Order?

  @@map("price_order")
}

model Order {
  id                String          @id @default(uuid())
  isPaid            Boolean         @default(false) @map("is_paid")
  isDelivered       Boolean         @default(false) @map("is_delivered")
  deliveredAt       DateTime?       @map("delivered_at")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  shippingAddressId String          @unique
  priceOrderId      String          @unique
  userId            String          @unique
  paymentMethod     PaymentType     @default(BILLET)
  orderItems        OrderItem[]
  seller            Seller          @relation(fields: [sellerId], references: [id])
  orderPrice        PriceOrder      @relation(fields: [priceOrderId], references: [id], onDelete: Cascade)
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id])
  transaction       Transaction?
  sellerId          String          @unique

  @@map("orders")
}

enum Status {
  STARTED
  PROCESSING
  PENDING
  APPROVED
  REFUSED
  REFUNDED
  CHARGBACK
  ERROR
}

enum PaymentType {
  BILLET
  CREDIT_CARD
}
