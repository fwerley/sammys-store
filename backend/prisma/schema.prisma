generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ReviewProduct {
  id        String   @id @default(cuid())
  name      String
  comment   String
  rating    Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Product   Product  @relation(fields: [productId], references: [id])
  productId String

  @@map("review_product")
}

model Product {
  id           String          @id @default(cuid())
  name         String          @unique
  slug         String          @unique
  image        String
  images       String[]
  sizes        String[]
  colors       String[]
  variants     String[]
  brand        String
  category     String
  subCategory  String[]
  description  String
  price        Float
  reviews      ReviewProduct[]
  freeDelivery Boolean         @default(false)
  discount     Float           @default(0)
  rating       Float
  seller       Seller          @relation(fields: [sellerId], references: [id])
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  countInStock Int             @map("count_in_stock")
  numReviews   Int             @map("num_reviews")
  OrderItem    OrderItem[]
  sellerId     String

  @@map("products")
}

model Seller {
  id          String    @id @default(cuid())
  name        String
  logo        String
  description String
  user        User      @relation(fields: [userId], references: [id])
  rating      Float     @default(0)
  numReviews  Int       @default(0)
  userId      String    @unique
  Order       Order[]
  Product     Product[]

  @@map("seller")
}

model federatedCredentials {
  userId   String
  provider String
  subject  String @unique
  user     User   @relation(fields: [userId], references: [id])
  id       String @id @default(cuid())

  @@map("federated_credentials")
}

model User {
  id                   String                 @id @default(cuid())
  name                 String
  email                String                 @unique
  password             String
  resetToken           String?
  active               Boolean                @default(false)
  isAdmin              Boolean                @default(false) @map("is_admin")
  isSeller             Boolean                @default(false)
  seller               Seller?
  document             String?
  mobile               String?
  Order                Order[]
  ShippingAddress      ShippingAddress[]
  updatedAt            DateTime               @updatedAt @map("updated_at")
  createdAt            DateTime               @default(now()) @map("created_at")
  federatedCredentials federatedCredentials[]

  @@map("users")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  sizes     String[]
  colors    String[]
  variants  String[]
  Order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  orderId   String
  productId String   @map("product_id")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("order_items")
}

model ShippingAddress {
  id              String   @id @default(cuid())
  fullName        String   @map("full_name")
  address         String
  city            String
  postalCode      String   @map("postal_code")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  federativeUnity String
  number          String
  neighborhood    String?
  phoneNumber     String?
  default         Boolean?
  userId          String?
  order           Order?
  user            User?    @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@map("shipping_address")
}

model Transaction {
  id                String    @id @default(cuid())
  code              String    @unique
  status            Status    @default(STARTED)
  installments      Int
  processorResponse String?
  cardId            String?
  barCode           String?
  urlBillet         String?
  orderId           String    @unique
  paidAt            DateTime?
  transactionId     String?   @unique
  order             Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("transaction")
}

model DeliveryOrder {
  // https://medium.com/@leandro.souara.web/criando-uma-implementa%C3%A7%C3%A3o-de-webhook-com-nodejs-4a490fb4b4c1
  id              String   @id @default(cuid())
  shippingCompany String
  trackingCode    String
  link            String?
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String   @unique
  createdAt       DateTime @default(now()) @map("created_at") @db.Date
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("delivery_order")
}

model PriceOrder {
  id            String   @id @default(cuid())
  itemsPrice    Float    @map("items_price")
  shippingPrice Float    @map("shipping_price")
  taxPrice      Float    @map("tax_price")
  totalPrice    Float    @map("total_price")
  installments  Int      @default(1)
  createdAt     DateTime @default(now()) @map("created_at") @db.Date
  updatedAt     DateTime @updatedAt @map("updated_at")
  Order         Order?

  @@map("price_order")
}

model Order {
  id                String          @id @default(cuid())
  transaction       Transaction?
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id])
  orderPrice        PriceOrder      @relation(fields: [priceOrderId], references: [id], onDelete: Cascade)
  orderItems        OrderItem[]
  paymentMethod     PaymentType     @default(BILLET)
  seller            Seller          @relation(fields: [sellerId], references: [id])
  deliveryOrder     DeliveryOrder?
  isPaid            Boolean         @default(false) @map("is_paid")
  isDelivered       Boolean         @default(false) @map("is_delivered")
  deliveredAt       DateTime?       @map("delivered_at")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  shippingAddressId String          @unique
  priceOrderId      String          @unique
  userId            String
  sellerId          String

  @@map("orders")
}

enum Status {
  STARTED
  PROCESSING
  PENDING
  APPROVED
  REFUSED
  REFUNDED
  CHARGBACK
  ERROR
}

enum PaymentType {
  BILLET
  CREDIT_CARD
  PIX
}
